/*
Copyright The Gaia Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/lmxia/gaia/pkg/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServerlessLister helps list Serverlesses.
type ServerlessLister interface {
	// List lists all Serverlesses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Serverless, err error)
	// Serverlesses returns an object that can list and get Serverlesses.
	Serverlesses(namespace string) ServerlessNamespaceLister
	ServerlessListerExpansion
}

// serverlessLister implements the ServerlessLister interface.
type serverlessLister struct {
	indexer cache.Indexer
}

// NewServerlessLister returns a new ServerlessLister.
func NewServerlessLister(indexer cache.Indexer) ServerlessLister {
	return &serverlessLister{indexer: indexer}
}

// List lists all Serverlesses in the indexer.
func (s *serverlessLister) List(selector labels.Selector) (ret []*v1alpha1.Serverless, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Serverless))
	})
	return ret, err
}

// Serverlesses returns an object that can list and get Serverlesses.
func (s *serverlessLister) Serverlesses(namespace string) ServerlessNamespaceLister {
	return serverlessNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServerlessNamespaceLister helps list and get Serverlesses.
type ServerlessNamespaceLister interface {
	// List lists all Serverlesses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Serverless, err error)
	// Get retrieves the Serverless from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Serverless, error)
	ServerlessNamespaceListerExpansion
}

// serverlessNamespaceLister implements the ServerlessNamespaceLister
// interface.
type serverlessNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Serverlesses in the indexer for a given namespace.
func (s serverlessNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Serverless, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Serverless))
	})
	return ret, err
}

// Get retrieves the Serverless from the indexer for a given namespace and name.
func (s serverlessNamespaceLister) Get(name string) (*v1alpha1.Serverless, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serverless"), name)
	}
	return obj.(*v1alpha1.Serverless), nil
}
